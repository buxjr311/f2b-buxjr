name: Auto Release on Version Change

on:
  push:
    branches: [ main ]
    paths: [ 'Cargo.toml' ]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version.outputs.changed }}
      new-version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check if version changed
      id: version
      run: |
        # Get current version from Cargo.toml
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
        echo "Current version: $CURRENT_VERSION"
        
        # Get previous version from last commit
        git checkout HEAD~1 -- Cargo.toml 2>/dev/null || echo "No previous Cargo.toml found"
        PREV_VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2 2>/dev/null || echo "0.0.0")
        echo "Previous version: $PREV_VERSION"
        
        # Restore current Cargo.toml
        git checkout HEAD -- Cargo.toml
        
        if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
          echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "Version unchanged"
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Add musl target
      run: rustup target add x86_64-unknown-linux-musl
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-auto-release-musl-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install cargo-deb
      run: cargo install cargo-deb
      
    - name: Build release binary with musl (static linking)
      run: |
        # Build with musl for universal compatibility (no GLIBC dependencies)
        cargo build --release --target x86_64-unknown-linux-musl --verbose
      
    - name: Create .deb package
      run: cargo deb --target x86_64-unknown-linux-musl --no-build --verbose
    
    - name: Create Release Notes File
      run: |
        VERSION="${{ needs.check-version.outputs.new-version }}"
        cat > release_notes.md << 'EOF'
        ## f2b-buxjr v${{ needs.check-version.outputs.new-version }}
        
        Automated release created from version bump in Cargo.toml.
        
        ### ðŸš€ Features
        - **High-Performance Pagination**: Efficiently handles thousands of banned IPs
        - **Universal Compatibility**: Static binary works on any Linux system  
        - **Zero Dependencies**: No GLIBC version requirements
        - **Enterprise Ready**: Optimized for large-scale deployments
        
        ### ðŸ“¦ Installation
        ```bash
        wget https://github.com/buxjr311/f2b-buxjr/releases/download/v${{ needs.check-version.outputs.new-version }}/f2b-buxjr_${{ needs.check-version.outputs.new-version }}-1_amd64.deb
        sudo dpkg -i f2b-buxjr_${{ needs.check-version.outputs.new-version }}-1_amd64.deb
        ```
        
        ### ðŸŽ® Usage
        ```bash
        sudo f2b-buxjr
        ```
        
        See [README.md](https://github.com/buxjr311/f2b-buxjr#readme) for complete documentation.
        EOF
    
    - name: Create Release with GitHub CLI
      run: |
        VERSION="${{ needs.check-version.outputs.new-version }}"
        DEB_FILE="target/x86_64-unknown-linux-musl/debian/f2b-buxjr_${VERSION}-1_amd64.deb"
        
        echo "Creating release v${VERSION}..."
        gh release create "v${VERSION}" "${DEB_FILE}" \
          --title "f2b-buxjr v${VERSION}" \
          --notes-file release_notes.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}